Skeleton 3D Electromagnetic MPI Particle-in-Cell (PIC) codes
by Viktor K. Decyk
copyright 2000-2015, regents of the university of california

This program contains sample codes for illustrating the basic structure
of a 3D Electromagnetic MPI Particle-in-Cell (PIC) code, in both Fortran
and C. The codes have no diagnosics except for initial and final
energies.  Their primary purpose is to provide example codes for
physical science students learning about MPI PIC codes.  They are also
intended as benchmark reference codes to aid in developing new codes and
in evaluating new computer architectures.  A serial version of this code
with the same structure (bpic3) also exists, and can be compared to this
code in order to understand the parallel algorithms.

PIC codes are widely used in plasma physics.  They model plasmas as
particles which interact self-consistently via the electromagnetic
fields they themselves produce.  PIC codes generally have three
important procedures in the main iteration loop.  The first is the
deposit, where some particle quantity, such as a charge, is accumulated
on a grid via interpolation to produce a source density.  The second
important procedure is the field solver, which solves Maxwell’s equation
or a subset to obtain the electric and/or magnetic fields from the
source densities.  Finally, once the fields are obtained, the particle
forces are found by interpolation from the grid, and the particle
co-ordinates are updated, using Newton’s second law and the Lorentz
force.  The particle processing parts dominate over the field solving
parts in a typical PIC application. 

More details about PIC codes can be found in the texts by C. K. Birdsall
and A. B. Langdon, Plasma Physics via Computer Simulation, 1985,
R. W. Hockney and J. W. Eastwood, Computer Simulation Using Particles,
1981, and John M. Dawson, "Particle simulation of plasmas", Rev. Mod.
Phys. 55, 403 (1983).  Details about the mathematical equations and
units used in this code is given in the companion article,
"Description of Electromagnetic Spectral Code from the UPIC Framework"
by Viktor K. Decyk, UCLA, in the file EMModels.pdf.

Details abut MPI can be found in the book by William Gropp, Ewing Lusk,
and Anthony Skjellum, Using MPI: Portable Parallel Programming with the
Message-Passing Interface, The MIT Press, 1994.

No warranty for proper operation of this software is given or implied.
Software or information may be copied, distributed, and used at own
risk; it may not be distributed without this notice included verbatim
with each file.  If use of these codes results in a publication, an
acknowledgement is requested.

The code here uses the complete electromagnetic interaction, obtained by
solving Maxwell's equation.  A spectral method using Fast Fourier
Transforms (FFTs) is used to solve the Maxwell and Poisson equations.  A
real to complex FFT is used, and the data in Fourier space is stored in
a packed format, where the input and output sizes are the same.  The
boundary conditions are periodic, only electron species are included,
and linear interpolation is used.

For parallelization, the code uses a simple 2D domain decomposition
scheme, where the field quantities (electric and magnetic fields, charge
and current density) are divided among the computational nodes.  The
primary decomposition divides the y and z values evenly, that is, each
node has all the x values for some y and some z.  The particles are
distributed so that the y and z co-ordinates of the particles have a
value within the domain.  This simple decomposition works if the
particles are uniformly distributed in space.  Particles at the edges of
the domain may need information from the nearby domains in order to
interpolate the fields.  To avoid unnecessary communication, one extra
guard cell in y and z is added at the end of each domain that replicates
the first y and z values in the nearby domains.  After particles are
updated, some particles may move to a neighboring domain.  A particle
manager (PPMOVE32) is responsible for moving such particles to the
appropriate domain.  The FFT is performed in 5 steps.  In going from
real space to Fourier space, the FFT is first performed in x for the y
and z values in the primary domain.  The data is then transposed to a
secondary domain decomposition, where each node has all the y values for
some x and z. The FFT is then performed in the y direction for the x and
z values in the secondary domain.  Finally, the data is then transposed
to a tertiary domain decomposition, where each node has all the z values
for some x and y.  The FFT is then performed in the z direction for the
x and y values in the tertiary domain.  Maxwell and Poisson equations
are solved using this tertiary decomposition.  There are five main
communication procedures which use MPI.  The first two add the guard
cells for the charge and current densities, the third copies the guard
cells for the electric and magnetic fields.  The fourth is the particle
manager, and the fifth transposes the data between the primary,
secondary, and tertiary decompositions using a some to some
communication pattern.  Further information about the domain
ecomposition parallel algorithms used can be found in the companion
presentation Dcomp.pdf and in the article: p. c. liewer and v. k. decyk,
j. computational phys. 85, 302 (1989).

Particles are initialized with a uniform distribution in space and a
gaussian distribution in velocity space.  This describes a plasma in
thermal equilibrium.  The inner loop contains a current and charge
deposit, add guard cell procedures, a vector and scalar FFT, a
transverse current procedure, Maxwell and Poisson solvers, vector FFTs,
copy guard cell procedures, a particle push, and a particle sorting
procedure.  The final energy and timings are printed.  A sample output
file for the default input parameters is included in the file output.

In more detail, the inner loop of the code contains the following
procedures in Fortran (C):

Deposit section:
   PPGRJPOST32L (cppgrjpost32l): relativistic current deposit, and
                                 update position: x(t+dt/2)->x(t+dt)
   PPGJPOST32L (cppgjpost32l): deposit current density, and update
                               position: x(t+dt/2)->x(t+dt)
   PPMOVE32 (cppmove32): moves particles to appropriate processor from
                         from list supplied by PPGRJPOST32L or 
                         PPGJPOST32L
   PPGPOST32L (cppgpost32l): deposit charge density
   PPACGUARD32XL (cppacguard32xl): add current density guard cells in x
                                   on local processor
   PPNACGUARD32L (cppnacguard32l): add charge density guard cells in y
                                   and z from remote processor
   PPAGUARD32XLL (cppaguard32xl): add charge density guard cells in x on
                                  local processor
   PPNAGUARD32L (cppnaguard32l): add charge density guard cells in y and
                                 z from remote processor 

Field solve section:
   WPPFFT32R (cwppfft32r): FFT charge density to fourier space
   WPPFFT32R3 (cwppfft32r3): FFT current density to fourier space
   PPCUPERP32 (cppcuperp32): take transverse part of current
   IPPBPOISP332 (cippbpoisp332): calculate initial magnetic field in
                                 fourier space
   PPMAXWEL32 (cppmaxwel32): update transverse electromagnetic fields in
                             fourier space
   PPOIS332 (cppois332): calculate smoothed longitudinal electric field
                         in fourier space
   PPEMFIELD32 (cppemfield32): add smoothed longitudinal and transverse
                               electric fields
   PPEMFIELD32 (cppemfield32): copy smoothed magnetic field
   WPPFFT32R3 (cwppfft32r3): FFT smoothed electric field to real space
   WPPFFT32R3 (cwppfft32r3): FFT smoothed magnetic field to real space

Particle Push section:
   PPNCGUARD32L (cppncguard32l): fill in guard cells for smoothed
                                 electric field in y and z from remote
                                 processor
   PPCGUARD32XL (cppcguard32xl): fill in guard cells for smoothed
                                 electric field in x field on local
                                 processor
   PPNCGUARD32L (cppncguard32l): fill in guard cells for smoothed
                                 magnetic field in y and z from remote
                                 processor
   PPCGUARD32XL (cppcguard32xl): fill in guard cells for smoothed
                                 magnetic field in x field on local
                                 processor
   PPGRBPUSH32L (cppgrbpush32l): update relativistic particle
                                 co-ordinates with smoothed electric and
                                 magnetic fields:
                                 x(t)->x(t+dt/2); v(t-dt/2)->v(t+dt/2)
   PPGBPUSH32L (cppgbpush32l): update particle co-ordinates with
                               smoothed electric and magnetic fields:
                               x(t)->x(t+dt/2); v(t-dt/2)->v(t+dt/2)
   PPMOVE32 (cppmove32): moves particles to appropriate processor from
                         from list supplied by PPGRBPUSH32L or
                         PPGBPUSH32L
   PPDSORTP32YZL (cppdsortp32yzl) : sort particles by cell

The inputs to the code are the grid parameters indx, indy, indz, the
particle number parameters npx, npy, npz, the time parameters tend, dt,
the velocity parameters vtx, vty, vtz, vx0, vy0, vz0, the inverse speed
of light ci, the flag relativity, and the sorting parameter sortime.

In more detail:
indx = exponent which determines length in x direction, nx=2**indx.
indy = exponent which determines length in y direction, ny=2**indy.
indz = exponent which determines length in z direction, nz=2**indz.
   These ensure the system lengths are a power of 2.
npx = number of electrons distributed in x direction.
npy = number of electrons distributed in y direction.
npz = number of electrons distributed in z direction.
   The total number of particles in the simulation is npx*npy*npz.
tend = time at end of simulation, in units of plasma frequency.
dt = time interval between successive calculations.
   The number of time steps the code runs is given by tend/dt.
   dt should be less than .45*ci for the electromagnetic code.
vtx/vty/vtz = thermal velocity of electrons in x/y/z direction.
   a typical value is 1.0.
vx0/vy0/vz0 = drift velocity of electrons in x/y/z direction.
ci = reciprocal of velocity of light
relativity = (no,yes) = (0,1) = relativity is used
sortime = number of time steps between electron sorting.
   This is used to improve cache performance.  sortime=0 to suppress.

The major program files contained here include:
pbpic3.f90    Fortran90 main program 
pbpic3.c      C main program
pplib3.f      Fortran77 MPI communications library
pplib3_h.f90  Fortran90 MPI communications interface (header) library
pplib3.f90    Fortran90 MPI communications library
pplib3.c      C MPI communications library [Not yet implemented]
pplib3.h      C MPI communications header library
pbpush3.f     Fortran77 procedure library
pbpush3_h.f90 Fortran90 procedure interface (header) library
pbpush3.c     C procedure library [Not yet implemented]
pbpush3.h     C procedure header library
dtimer.c      C timer function, used by both C and Fortran

Files with the suffix .f90 adhere to the Fortran 90 standard, files with
the suffix .f adhere to the Fortran77 standard, files with the suffix .c
and .h adhere to the C99 standard.

The makefile is setup to use gcc and gfortran with Linux.  A version for
Mac OS X is also in the Makefile, but is commented out.  

Two executables can be created, fpbpic3 for Fortran, and cpbpic3_f for a
C main program calling the Fortran procedure library.

To compile program, execute:

Make program_name

where program_name is either: fpbpic3 or cpbpic3_f.

To execute, type the name of the executable:

mpirun -np nproc ./program_name

where program_name is either fpbpic3 or cpbpic3_f, and
where nproc is the number of processors to be used.

There is one restriction on the number of processors which can be used:
this simple skeleton code does not support the case where MPI nodes have
zero grid points.  This special case can happen for certain combinations
of the grid size in y or z (set by the parameters indy or indz,
respectively) and the number of processors in y and z.  If this happens
the code will exit with an error message.  This special case will never
occur if the grid size in y is an exact multiple of the number of
processors in y, and the grid size in z is an exact multiple of the
number of processors in z.

The file output contains the results produced for the default parameters.
Typical timing results are shown in the file fpbpic3_bench.pdf.

The Fortran version can be compiled to run with double precision by
changing the Makefile (typically by setting the compiler options flags
-r8).

The libraries pbpush3_f.c and pplib3_f.c contains wrapper functions to
allow the Fortran libraries to be called from C.
