Skeleton 1D Electrostatic Particle-in-Cell (PIC) codes field diagnostics
by Viktor K. Decyk
copyright 2007-2015, regents of the university of california

This directory contains procedures that are useful for performing wave
diagnostics, such as measuring the wavenumber and frequency of plasma
waves, for the 1D Electrostatic Particle-in-Cell (PIC) codes in the pic1
directory.  The procedures, written in Fortran, are in the file
field1.f.  The file field1_f.c contains wrapper functions to allow the
Fortran procedures to be called from C.

The electric and magnetic fields used to advance particles are smoothed
by suppressing large wavenumbers in order to avoid numerical errors due
to aliasing.  The field diagnostics, however, are normally unsmoothed.
The main diagnostic is the electrostatic potential in fourier space.
This is calculated by the procedure POTP1.  Other diagnostics, such as
the unsmoothed electric field can be calculated from the potential with
the procedures GRADF1.  The fourier modes are normally stored to disk
for later post-processing, such as by performing a fourier transform in
time to obtain the frequencies for different wavenumbers.  It is usually
not necessary to store all the modes to disk, since the high wavenumber
modes are usually unimportant.  Furthermore, the fourier modes are
stored in a packed format which is difficult to work with.  Thus
the procedure RDMODES1 is also provided to extract a subset of the
fourier modes for the potential and copy them in an unpacked format for
easier post-processing. (The procedure WRMODES1 is provided to repack
the scalar fourier modes, if needed.)

No warranty for proper operation of this software is given or implied.
Software or information may be copied, distributed, and used at own
risk; it may not be distributed without this notice included verbatim
with each file.  If use of these codes results in a publication, an
acknowledgement is requested.

To use these procedures, one first needs to add some declarations in the
main programs pic1.90 and pic1.c in the parent directory pic1, similar
to the following.

For Fortran:
   integer :: modesx, modesxd
   complex, dimension(:), pointer :: potc, pott

For C:
   int modesx, modesxd;
   float complex *potc = NULL, *pott = NULL;
   
Then before the main iteration loop, one needs to allocate the arrays.

For Fortran:
   modesx = nx/4; modesxd = modesx
   allocate(potc(nxeh),pott(modesxd))

For C:
   modesx = nx/4; modesxd = modesx;
   potc = (float complex *) malloc(nxeh*sizeof(float complex));
   pott = (float complex *) malloc(modesxd*sizeof(float complex));

Finally, in the main iteration loops just before the push procedures,
one can add some diagnostics, such as:

For Fortran:
! perform potential diagnostic and unpack into array pott
! updates potc, pott, wt
   call POTP1(qe,potc,ffc,wt,nx,nxeh,nxh)
   call RDMODES1(potc,pott,nx,modesx,nxeh,modesxd)

For C:
/* perform potential diagnostic and unpack into array pott */
/* updates potc, pott, wt                                  */
   cpotp1((float complex *)qe,potc,ffc,&wt,nx,nxeh,nxh);
   crdmodes1(potc,pott,nx,modesx,nxeh,modesxd);

One would have to modify the Makefile as well to include the files
field1.f and field1_f.c, as needed.
