Skeleton 3D Electrostatic OpenMP Particle-in-Cell (PIC) codes field
diagnostics
by Viktor K. Decyk
copyright 2007-2015, regents of the university of california

This directory contains procedures that are useful for performing wave
diagnostics, such as measuring the wavenumber and frequency of plasma
waves, for the 3D Electrostatoc OpenMP Particle-in-Cell (PIC) codes in
the mpic2 directory.  The procedures, written in Fortran, are in the
file mfield3.f.  The file mfield3_f.c contains wrapper functions to
allow the Fortran procedures to be called from C.

The electric fields used to advance particles are smoothed by
suppressing large wavenumbers in order to avoid numerical errors due to
aliasing.  The field diagnostics, however, are normally unsmoothed.  The
main diagnostic is the electrostatic potential in fourier space.  This
is calculated by the procedures MPOTP3.  Other diagnostics, such as the
unsmoothed longitudinal electric field can be calculated from the
potentials with the procedure MGRADF3.  The fourier modes are normally
stored to disk for later post-processing, such as by performing a
fourier transform in time to obtain the frequencies for different
wavenumbers.  It is usually not necessary to store all the modes to
disk, since the high wavenumber modes are usually unimportant.
Furthermore, the fourier modes are stored in a packed format which is
difficult to work with.  Thus the procedure RDMODES3 is also provided to
extract a subset of the fourier modes for the potential, and copy them
in an unpacked format for easier post-processing. (The procedure
WRMODES3 is provided to repack the scalarfourier modes, if needed.)

No warranty for proper operation of this software is given or implied.
Software or information may be copied, distributed, and used at own
risk; it may not be distributed without this notice included verbatim
with each file.  If use of these codes results in a publication, an
acknowledgement is requested.

To use these procedures, one first needs to add some declarations in the
main programs mpic3.90 and mpic3.c in the parent directory mpic3,
similar to the following.

For Fortran:
   integer :: modesx, modesy, modesz, modesxd, modesyd, modeszd
   complex, dimension(:,:,:), pointer :: potc, pott

For C:
   int modesx, modesy, modesz, modesxd, modesyd, modeszd;
   float complex *potc = NULL, *pott = NULL;
   
Then before the main iteration loop, one needs to allocate the arrays.

For Fortran:
   modesx = nx/4; modesy = ny/4; modesz = nz/4
   modesxd = modesx
   modesyd = min(2*modesy-1,ny); modeszd = min(2*modesz-1,nz)
   allocate(potc(nxeh,nye,nze),pott(modesxd,modesyd,modeszd))

For C:
   modesx = nx/4; modesy = ny/4; modesz = nz/4;
   modesxd = modesx; 
   modesyd = 2*modesy - 1; modeszd = 2*modesz - 1;
   modesyd = modesyd < ny ? modesyd : ny;
   modeszd = modeszd < nz ? modeszd : nz;
   potc = (float complex *) malloc(nxeh*nye*nze
           *sizeof(float complex));
   pott = (float complex *) malloc(modesxd*modesyd*modeszd
           *sizeof(float complex));

Finally, in the main iteration loops just before the push procedures,
one can add some diagnostics, such as:

For Fortran:
! perform potential diagnostic and unpack into array pott
! updates potc, pott, wt
   call MPOTP3(qe,potc,ffc,wt,nx,ny,nz,nxeh,nye,nze,nxh,nyh,nzh)
   call RDMODES3(potc,pott,nx,ny,nz,modesx,modesy,modesz,nxeh,nye,nze,&
  &modesxd,modesyd,modeszd)

For C:
/* perform potential diagnostic and unpack into array pott */
/* updates potc, pott, wt                                  */
   cmpotp3((float complex *)qe,potc,ffc,&wt,nx,ny,nz,nxeh,nye,nze,nxh,
           nyh,nzh);
   crdmodes3(potc,pott,nx,ny,nz,modesx,modesy,modesz,nxeh,nye,nze,
             modesxd,modesyd,modeszd);

One would have to modify the Makefile as well to include the files
mfield3.f and mfield3_f.c, as needed.
