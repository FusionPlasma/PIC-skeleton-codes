Skeleton 3D Electrostatic MPI/OpenMP Particle-in-Cell (PIC) codes field
diagnostics
by Viktor K. Decyk
copyright 2007-2015, regents of the university of california

This directory contains procedures that are useful for performing wave
diagnostics, such as measuring the wavenumber and frequency of plasma
waves, for the 3D Electrostatic MPI/OpenMP Particle-in-Cell (PIC) codes
in the the mppic3 directory.  The procedures, written in Fortran, are in
the file mpfield3.f.  The file mpfield3_f.c contains wrapper functions
to allow the Fortran procedures to be called from C.

The electric fields used to advance particles are smoothed by
suppressing large wavenumbers in order to avoid numerical errors due to
aliasing.  The field diagnostics, however, are normally unsmoothed.  The
main diagnostic is the electrostatic potential in fourier space.  This
is calculated by the procedure MPPOTP32.  Other diagnostics, such as the
unsmoothed electric field can be calculated from the potentials with the
procedure MPPGRADF32.  The fourier modes are normally stored to disk for
later post-processing, such as by performing a fourier transform in time
to obtain the frequencies for different wavenumbers.  It is usually not
necessary to store all the modes to disk, since the high wavenumber
modes are usually unimportant.  Furthermore, the fourier modes are
stored in a packed format which is difficult to work with.  Thus the
procedure PPRDMODES32 is also provided to extract a subset of the
fourier modes for the potential and copy them in an unpacked format for
easier post-processing. (The procedure PPWRMODES32 is provided to repack
the scalar fourier modes, if needed.)

No warranty for proper operation of this software is given or implied.
Software or information may be copied, distributed, and used at own
risk; it may not be distributed without this notice included verbatim
with each file.  If use of these codes results in a publication, an
acknowledgement is requested.

To use these procedures, one first needs to add some declarations in the
main programs mppic3.90 and mppic3.c in the parent directory mppic3,
similar to the following.

For Fortran:
   integer :: modesx, modesy, modesz, modesxpd, modesypd, modeszd
   complex, dimension(:,:,:), pointer :: potc, pott

For C:
   int modesx, modesy, modesz, modesxpd, modesypd, modeszd;
   float complex *potc = NULL, *pott = NULL;
   
Then before the main iteration loop, one needs to allocate the arrays.

For Fortran:
   modesx = nx/4; modesy = ny/4; modesz = nz/4
   modesxpd = min(modesx,kxyp); modesypd = kyzp
   modeszd = min(2*modesz-1,nz)
   if (modesx==(nx/2+1)) modesxpd = modesxpd + 1
   allocate(potc(nze,kxyp,kyzp))
   allocate(pott(modeszd,modesxpd,modesypd))

For C:
   modesx = nx/4; modesy = ny/4; modesz = nz/4;
   modesxpd = modesx < kxyp ? modesx : kxyp; modesypd = kyzp;
   modeszd = 2*modesz - 1;
   modeszd = modeszd < nz ? modeszd : nz;
   if (modesx==(nx/2+1))
      modesxpd += 1;
   potc = (float complex *) malloc(nze*kxyp*kyzp*sizeof(float complex));
   pott = (float complex *) malloc(modeszd*modesxpd*modesypd
                                   *sizeof(float complex));

Finally, in the main iteration loops just before the push procedures,
one can add some diagnostics, such as:

For Fortran:
! perform potential diagnostic and unpack into array pott
! updates potc, pott, wt
   call MPPOTP32(qt,potc,ffc,wt,nx,ny,nz,kstrt,nvpy,nvpz,nze,kxyp,kyzp,
                 nzh)
   call PPRDMODES32(potc,pott,nx,ny,nz,modesx,modesy,modesz,kstrt,nvpy,
                    nvpz,nze,kxyp,kyzp,modesxpd,modesypd,modeszd)

For C:
/* perform potential diagnostic and unpack into array pott */
/* updates potc, pott, wt                                  */
   cmppotp32(qt,potc,ffc,&wt,nx,ny,nz,kstrt,nvpy,nvpz,nze,kxyp,kyzp,nzh);
   cpprdmodes32(potc,pott,nx,ny,nz,modesx,modesy,modesz,kstrt,nvpy,nvpz,
                nze,kxyp,kyzp,modesxpd,modesypd,modeszd);

One would have to modify the Makefile as well to include the files
mpfield3.f and mpfield3_f.c, as needed.
