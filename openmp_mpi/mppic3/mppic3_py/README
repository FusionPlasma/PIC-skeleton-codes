Skeleton 3D Electrostatic Python MPI/OpenMP Particle-in-Cell (PIC) code
by Viktor K. Decyk, Adam Tableman, and Qiyang Hu
copyright 2015, regents of the university of california

This file contains a 3D Electrostatic Python MPI/OpenMP PIC code.  It is
based on the 3D Electrostatic MPI/OpenMP PIC codes contained in the
directory mppic3.  The primary purpose is to illustrate how to replace a
Fortran main code with a Python script, in order allow the program to be
run interactively.

Python version 2.7 is recommended, and is available from the web site:
www.python.org.  Numpy (http://www.numpy.org) and SciPy
(http://www.scipy.org) also need to be installed.

The file fmppic3.py is a line by line translation of mppic3.f90 in the
directory mppic3.  The procedure libraries mppush2.f and mpplib3.f90,
are identical to those in mppic3.  Interface function mppush3pp_hpy.f90
is provided to allow the f2py program to automatically wrap the
procedures to make them accessible to Python.  The interface file
mppush3pp_hpy.f90 is a merger of the files mppush3_h.f90 and
mpplib3_h.f90.  It was necessary to merge these two files because the
procedures in mpplib3.f are used both by the Python script as well as
internally in mppush3.f.  These files are further modified in two ways.
The first modification was the removal of the module/end module
statements, which fp2y cannot currently handle properly.  The second was
the replacement of explicit-shape array declarations with assumed-size
array declarations so that f2py would not remove the arguments in the
array declarations from the argument list.

No warranty for proper operation of this software is given or implied.
Software or information may be copied, distributed, and used at own
risk; it may not be distributed without this notice included verbatim
with each file.  If use of these codes results in a publication, an
acknowledgement is requested.

The major program files contained here include:
fmppic3.py         Python main script for Fortran procedure library
mppush3.f          Fortran77 procedure library
mppush3pp_hpy.f90  Fortran procedure and MPI interface (header) library
dtimer.c           C timer function, used by both C and Fortran
dtimer_hpy.f90     C timer interface (header) library
mpplib3.f90        Fortran90 MPI communications library

Files with the suffix .f90 adhere to the Fortran 90 standard, files with
the suffix .f adhere to the Fortran77 standard, files with the suffix .c
and .h adhere to the C99 standard.

The makefile is setup to use gcc and gfortran with Linux.  Versions for
other compilers are also in the Makefile but are commented out.

One dynamic library can be created, fmppush3.so for Fortran.  To create
it, execute:

make

to create both libraries.

The command to execute a program with both MPI and OpenMP varies from
one system to another.  One possible command is:

mpiexec -np nproc -perhost n python program_name

where nproc is the number of processors to be used, and
where n is the number of MPI nodes per host.

There is one restriction on the number of processors which can be used:
this simple skeleton code does not support the case where MPI nodes have
zero grid points.  This special case can happen for certain combinations
of the grid size in y or z (set by the parameters indy or indz,
respectively) and the number of processors in y and z.  If this happens
the code will exit with an error message.  This special case will never
occur if the grid size in y is an exact multiple of the number of
processors in y, and the grid size in z is an exact multiple of the
number of processors in z.

The file output contains the results produced for the default parameters.
